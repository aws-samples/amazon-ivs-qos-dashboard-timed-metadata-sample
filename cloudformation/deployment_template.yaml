AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: QoS - Player with event capture, ingest and processing implementation

Mappings:
    SourceCodeBucket:
      General:
        S3Bucket: 'BUCKET_NAME'
        LambdaUIDeploymentCodePrefix: 'qos/lambda-functions/ui-deployment'
        PlayerSummaryCWCodePrefix: 'qos/lambda-functions/playersummary-cw-function'
        QuizSummaryCWCodePrefix: 'qos/lambda-functions/quizsummary-cw-function'
        AddPartitionFunctionCodePrefix: 'qos/lambda-functions/add-partition-function'
        UICodePrefix: 'user-interfaces'
        Version: 'VERSION'

Parameters:
  LiveURL:
    Type: String

  DeployDemoUI:
    Type: String
    Description: Deploy the demo user interface for testing
    Default: true
    AllowedValues:
      - true
      - false

Conditions:
  DeployDemoUICondition: !Equals [!Ref DeployDemoUI, true]
  USStandardRegion: !Equals [!Ref "AWS::Region", "us-east-1"]

Resources:
  SourceBucket:
    Type: 'AWS::S3::Bucket'
    Condition: DeployDemoUICondition
    Properties:
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          -
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - 'GET'
              - 'PUT'
              - 'POST'
              - 'DELETE'
            AllowedOrigins:
              - '*'
            MaxAge: 3000
            ExposedHeaders:
              - 'ETAG'
              - 'x-amz-cf-id'

  SourceBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: DeployDemoUICondition
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${SourceBucket}/*'
            Effect: Allow
            Principal:
              AWS:
              - !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CFOriginAccessIdentity}'
      Bucket: !Ref SourceBucket

  CFOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Condition: DeployDemoUICondition
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "${AWS::StackName} - QoS - OAI for player"

  CFDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Condition: DeployDemoUICondition
    DependsOn:
      - SourceBucket
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !If [USStandardRegion, !Sub '${SourceBucket}.s3.amazonaws.com', !Sub '${SourceBucket}.s3-${AWS::Region}.amazonaws.com']
          Id: myS3Origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CFOriginAccessIdentity}
        Enabled: True
        Comment: !Sub "${AWS::StackName} - distribution for vod website"
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: myS3Origin
          ViewerProtocolPolicy: allow-all
          MinTTL: 300
          MaxTTL: 86400
          DefaultTTL: 86400
          SmoothStreaming: False
          Compress: True
          ForwardedValues:
            QueryString: False
            Cookies:
              Forward: 'none'
            Headers:
              - 'Access-Control-Request-Headers'
              - 'Access-Control-Request-Method'
              - 'Origin'
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: True
        Logging:
          Bucket: !GetAtt PlayerLogsBucket.DomainName
          Prefix: 'access_logs/cloudfront/'

  GlueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"

# Create an AWS Glue database
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Sub '${AWS::StackName}_qos_db'

  PlayerLogsTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: 'player_logs'
        TableType: EXTERNAL_TABLE
        Parameters: {
          "classification": "json"
        }
        PartitionKeys:
        - Name: year
          Type: string
        - Name: month
          Type: string
        - Name: day
          Type: string
        - Name: hour
          Type: string
        StorageDescriptor:
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Columns:
          - Name: metric_type
            Type: string
          - Name: user_id
            Type: string
          - Name: client_platform
            Type: string
          - Name: channel_watched
            Type: string
          - Name: is_live
            Type: boolean
          - Name: error_count
            Type: int
          - Name: playing_time_ms
            Type: int
          - Name: buffering_time_ms
            Type: int
          - Name: rendition_name
            Type: string
          - Name: rendition_height
            Type: int
          - Name: startup_latency_ms
            Type: int
          - Name: live_latency_ms
            Type: int
          - Name: event_time
            Type: timestamp
          - Name: question
            Type: string
          - Name: answer
            Type: string
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Join ['',['s3://',!Ref PlayerLogsBucket,'/player_logs/']]
          SerdeInfo:
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe

  DeployFunctionRole:
    Type: 'AWS::IAM::Role'
    Condition: DeployDemoUICondition
    Properties:
      Path: /service-role/
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonCognitoPowerUser'
      Policies:
        - PolicyName: CustomPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:*'
                Resource: !Sub 'arn:aws:s3:::${SourceBucket}/*'
                Effect: Allow
              - Action:
                  - 's3:*'
                Resource: !Join ["/",
                [
                !Join [":",['arn','aws','s3','','',
                !Join ["-", [!FindInMap ["SourceCodeBucket", "General", "S3Bucket"],!Ref "AWS::Region"]]
                ]],
                '*']]
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action:
            - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
              - s3.amazonaws.com

  DeployFunction:
    Type: 'AWS::Serverless::Function'
    Condition: DeployDemoUICondition
    Properties:
      CodeUri: ../dist/deploy-function.zip
      MemorySize: 512
      Environment:
        Variables:
          SourceBucket: !Ref SourceBucket
          SourceFileBucket: !Join ["-", [!FindInMap ["SourceCodeBucket", "General", "S3Bucket"], !Ref "AWS::Region"]]
          SourceUIFilePath: !Join ["/", [!FindInMap ["SourceCodeBucket", "General", "LambdaUIDeploymentCodePrefix"], !FindInMap ["SourceCodeBucket", "General", "UICodePrefix"], !FindInMap ["SourceCodeBucket", "General", "Version"], "player-ui.zip"]]
          UIPrefix: 'ui'
          PlayerSummaryEndpoint: !Sub 'https://${EventIngestApi}.execute-api.${AWS::Region}.amazonaws.com/prod2/streams'
          AnswerSummaryEndpoint: !Sub 'https://${EventIngestApi}.execute-api.${AWS::Region}.amazonaws.com/prod2/streams'
          LIVE_URL: !Ref LiveURL
      Handler: index.handler
      Role: !GetAtt DeployFunctionRole.Arn
      Timeout: 300
      Runtime: nodejs12.x

  DeployArtifacts:
    Type: 'Custom::DeployUI'
    Condition: DeployDemoUICondition
    DependsOn:
      - CFDistribution
    Properties:
      DeliveryStreamName: !Ref PlayerLogsDeliveryStream
      PlayerSummaryEndpoint: !Sub 'https://${EventIngestApi}.execute-api.${AWS::Region}.amazonaws.com/prod2/streams'
      AnswerSummaryEndpoint: !Sub 'https://${EventIngestApi}.execute-api.${AWS::Region}.amazonaws.com/prod2/streams'
      Region: !Sub ${AWS::Region}
      CloudFrontDomain: !Sub https://${CFDistribution.DomainName}/
      # CloudFrontDomain: 'test'
      ServiceToken: !GetAtt DeployFunction.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-qos-lambda
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 'QoS-Lambda-exec-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: arn:aws:lambda:*:*:function:*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*:*
              - Effect: Allow
                Action:
                  - cloudwatch:PutInsightRule
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricData
                Resource: "*"

  PlayerSummaryCWFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../dist/playersummary-cw-function.zip
      MemorySize: 512
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Runtime: nodejs12.x
      Environment:
        Variables:
          DASHBOARD_NAME: !Sub ${AWS::StackName}-QoS

  QuizSummaryCWFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../dist/quizsummary-cw-function.zip
      MemorySize: 512
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Runtime: nodejs12.x
      Environment:
        Variables:
          DASHBOARD_NAME: !Sub ${AWS::StackName}-QoS

  AddPartitionFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /service-role/
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: CustomPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: athena:*
                Effect: Allow
                Resource: "*"
              - Action:
                  - glue:CreateDatabase
                  - glue:DeleteDatabase
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:UpdateDatabase
                  - glue:CreateTable
                  - glue:DeleteTable
                  - glue:BatchDeleteTable
                  - glue:UpdateTable
                  - glue:GetTable
                  - glue:GetTables
                  - glue:BatchCreatePartition
                  - glue:CreatePartition
                  - glue:DeletePartition
                  - glue:BatchDeletePartition
                  - glue:UpdatePartition
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:BatchGetPartition
                Effect: Allow
                Resource: "*"
              - Action:
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                  - s3:CreateBucket
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - arn:aws:s3:::aws-athena-query-results-*
                  - !Sub arn:aws:s3:::${PlayerLogsBucket}*
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - s3.amazonaws.com
                - glue.amazonaws.com
                - athena.amazonaws.com

  AddPartitionFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../dist/add-partition-function.zip
      MemorySize: 512
      Handler: index.handler
      Role: !GetAtt AddPartitionFunctionRole.Arn
      Timeout: 900
      Runtime: nodejs12.x
      Environment:
        Variables:
          ATHENA_RESULT_BUCKET: !Ref PlayerLogsBucket
          PLAYER_LOGS_BUCKET: !Ref PlayerLogsBucket
          PLAYER_LOGS_TABLE: !Join ['.', [!Ref GlueDatabase, !Ref PlayerLogsTable]]
          # ETL_PLAYER_LOGS_TABLE: !Join ['.', [!Ref GlueDatabase, !Ref WatchTimeLogsTable]]

  AddPartitionScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(5 minutes)"
      State: "ENABLED"
      Targets:
        -
          Arn: !GetAtt AddPartitionFunction.Arn
          Id: "AddPartitionFunction"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AddPartitionFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt AddPartitionScheduledRule.Arn

  PlayerLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-logs-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled

  DeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'

  DeliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
                - !Sub 'arn:aws:s3:::${PlayerLogsBucket}'
                - !Sub 'arn:aws:s3:::${PlayerLogsBucket}/*'
          - Effect: "Allow"
            Action:
              - "glue:GetTable"
              - "glue:GetTableVersion"
              - "glue:GetTableVersions"
            Resource: 
              - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}_qos_db/player_logs"
              - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${AWS::StackName}_qos_db"
              - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog"
          - Effect: Allow
            Action:
              - "logs:PutLogEvents"
            Resource:
              - "*" # this needs to be adjusted to the CWLog Stream
      Roles:
        - !Ref DeliveryRole

  KinesisFirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ivsqos/${AWS::StackName}"
      RetentionInDays: 30

  KinesisFirehoseLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref KinesisFirehoseLogGroup
      LogStreamName: "playerlogstream"

  PlayerLogsDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    #Condition: NoElasticSearchCondition
    DependsOn:
      - PlayerLogsBucket
      - PlayerLogsTable
      - DeliveryPolicy
    Properties:
      DeliveryStreamType: DirectPut
      DeliveryStreamName: !Sub '${AWS::StackName}-playerlogs-stream'
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${PlayerLogsBucket}'
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 64
        CompressionFormat: UNCOMPRESSED
        DataFormatConversionConfiguration:
          SchemaConfiguration: 
            CatalogId: !Ref AWS::AccountId 
            RoleARN: !GetAtt DeliveryRole.Arn
            DatabaseName: !Ref GlueDatabase 
            TableName: !Ref PlayerLogsTable 
            Region: !Ref AWS::Region
            VersionId: LATEST 
          InputFormatConfiguration: 
            Deserializer: 
              OpenXJsonSerDe: {}
          OutputFormatConfiguration: 
            Serializer: 
              ParquetSerDe: {}
          Enabled: True
        Prefix: player_logs/
        RoleARN: !GetAtt DeliveryRole.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Sub "/ivsqos/${AWS::StackName}"
          LogStreamName: "playerlogstream"

  KinesisAnalyticsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: kinesisanalytics.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: Open
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  RealtimeAnalytics:
    Type: AWS::KinesisAnalytics::Application
    Properties:
      ApplicationName: !Sub '${AWS::StackName}-qos-realtimeapp1'
      ApplicationDescription: "QoS Realtime Application"
      ApplicationCode: "CREATE OR REPLACE STREAM PLAYER_STATS (METRIC_TYPE VARCHAR(20), METRIC_UNIT VARCHAR(15), CLIENT_PLATFORM VARCHAR(10), SUMMARY DOUBLE);\n
 CREATE OR REPLACE PUMP \"STREAM_PUMP4\" AS INSERT INTO \"PLAYER_STATS\" \n
 -- errors \n
 SELECT STREAM 'ERRORS', 'Count', \"client_platform\", SUM(\"error_count\") \n
 FROM     \"SOURCE_SQL_STREAM_001\" where \"metric_type\"='PLAYBACK_SUMMARY' \n
 GROUP BY \"client_platform\", \n
 STEP(\"SOURCE_SQL_STREAM_001\".ROWTIME BY INTERVAL '60' SECOND) \n
 UNION ALL \n
 -- concurrent users \n
 SELECT STREAM 'CONCURRENCY', 'Count', \"client_platform\", count(*) \n
 FROM     \"SOURCE_SQL_STREAM_001\" where \"metric_type\"='PLAYBACK_SUMMARY' \n
 GROUP BY \"client_platform\", \n
 STEP(\"SOURCE_SQL_STREAM_001\".ROWTIME BY INTERVAL '60' SECOND) \n
 UNION ALL \n
 -- average start up time in seconds \n
 SELECT STREAM 'STARTUP_TIME', 'Seconds', \"client_platform\", AVG(\"startup_latency_ms\")/1000 \n
 FROM     \"SOURCE_SQL_STREAM_001\"  where \"metric_type\"='PLAYBACK_SUMMARY' \n
 GROUP BY \"client_platform\", \n
 STEP(\"SOURCE_SQL_STREAM_001\".ROWTIME BY INTERVAL '60' SECOND) \n
  UNION ALL \n
-- buffer ratio \n
SELECT STREAM 'BUFFER_RATIO', 'Percent', \"client_platform\", AVG(\"buffering_time_ms\"/\"playing_time_ms\")*100 \n
 FROM     \"SOURCE_SQL_STREAM_001\" where \"metric_type\"='PLAYBACK_SUMMARY' \n
 GROUP BY \"client_platform\", \n
 STEP(\"SOURCE_SQL_STREAM_001\".ROWTIME BY INTERVAL '60' SECOND) \n
   UNION ALL \n
-- live latency \n
SELECT STREAM 'LIVE_LATENCY', 'Seconds', \"client_platform\", AVG(\"live_latency_ms\")/1000 \n
 FROM     \"SOURCE_SQL_STREAM_001\" where \"metric_type\"='PLAYBACK_SUMMARY' \n
 GROUP BY \"client_platform\", \n
 STEP(\"SOURCE_SQL_STREAM_001\".ROWTIME BY INTERVAL '60' SECOND);\n"
      Inputs:
        - NamePrefix: "SOURCE_SQL_STREAM"
          InputSchema:
            RecordColumns:
             - Name: "metric_type"
               SqlType: "VARCHAR(16)"
               Mapping: "$.metric_type"
             - Name: "client_platform"
               SqlType: "VARCHAR(10)"
               Mapping: "$.client_platform"
             - Name: "channel_watched"
               SqlType: "VARCHAR(20)"
               Mapping: "$.channel_watched"
             - Name: "user_id"
               SqlType: "VARCHAR(64)"
               Mapping: "$.user_id"
             - Name: "is_live"
               SqlType: "BOOLEAN"
               Mapping: "$.is_live"
             - Name: "error_count"
               SqlType: "INTEGER"
               Mapping: "$.error_count"
             - Name: "playing_time_ms"
               SqlType: "BIGINT"
               Mapping: "$.playing_time_ms"
             - Name: "buffering_time_ms"
               SqlType: "BIGINT"
               Mapping: "$.buffering_time_ms"
             - Name: "rendition_name"
               SqlType: "VARCHAR(20)"
               Mapping: "$.rendition_name"
             - Name: "rendition_height"
               SqlType: "INTEGER"
               Mapping: "$.rendition_height"
             - Name: "startup_latency_ms"
               SqlType: "BIGINT"
               Mapping: "$.startup_latency_ms"
             - Name: "live_latency_ms"
               SqlType: "BIGINT"
               Mapping: "$.live_latency_ms"
             - Name: "question"
               SqlType: "VARCHAR(50)"
               Mapping: "$.question"
             - Name: "answer"
               SqlType: "VARCHAR(20)"
               Mapping: "$.answer"
            RecordFormat:
              RecordFormatType: "JSON"
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: "$"
          KinesisFirehoseInput:
            ResourceARN: !GetAtt PlayerLogsDeliveryStream.Arn
            RoleARN: !GetAtt KinesisAnalyticsRole.Arn

  PlayerSummaryApplication:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    Properties:
      ApplicationName: !Ref RealtimeAnalytics
      Output:
          Name: "PLAYER_STATS"
          DestinationSchema:
            RecordFormatType: "JSON"
          LambdaOutput:
            ResourceARN: !GetAtt PlayerSummaryCWFunction.Arn
            RoleARN: !GetAtt KinesisAnalyticsRole.Arn

  QuizSummaryApplication:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    Properties:
      ApplicationName: !Ref RealtimeAnalytics
      Output:
          Name: "QUIZ_STATS"
          DestinationSchema:
            RecordFormatType: "JSON"
          LambdaOutput:
            ResourceARN: !GetAtt QuizSummaryCWFunction.Arn
            RoleARN: !GetAtt KinesisAnalyticsRole.Arn

  GlueJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action:
            - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
              - glue.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

  # WatchTimeGlueJob:
  #     Type: AWS::Glue::Job
  #     Condition: DeployDemoUICondition
  #     DependsOn: DeployFunction
  #     Properties:
  #       Command:
  #         Name: glueetl
  #         ScriptLocation: !Join ["", ["s3://",!Ref SourceBucket,"/qos/etl/",!FindInMap [SourceCodeBucket, General, Version],"/player_log_job"]]
  #       DefaultArguments:
  #         "--job-bookmark-option": "job-bookmark-enable"
  #         "--GLUE_DB_NAME": !Ref GlueDatabase
  #         "--GLUE_PLAYER_LOG_TABLE": !Ref PlayerLogsTable
  #         "--PLAYER_LOG_BUCKET_PROCESSED_PATH": !Join ["",["s3://",!Ref PlayerLogsBucket,"/watch_time_processed/"]]
  #       ExecutionProperty:
  #         MaxConcurrentRuns: 2
  #       MaxRetries: 0
  #       Name: !Sub "${AWS::StackName}-WatchTimeGlueJob"
  #       Role: !Ref GlueJobRole
  #
  # WatchTimeGlueTrigger:
  #   Type: AWS::Glue::Trigger
  #   Properties:
  #     Type: 'SCHEDULED'
  #     Description: 'ETL Job to calculate Watch Time'
  #     Actions:
  #       - JobName: !Ref WatchTimeGlueJob
  #         Arguments:
  #           '--job-bookmark-option': job-bookmark-enable
  #           '--GLUE_DB_NAME': !Ref GlueDatabase
  #           '--GLUE_PLAYER_LOG_TABLE': !Ref PlayerLogsTable
  #           '--PLAYER_LOG_BUCKET_PROCESSED_PATH': !Join ["",["s3://",!Ref PlayerLogsBucket,"/watch_time_processed/"]]
  #     Schedule: cron(0/5 * * * ? *)
  #     Name: !Sub "${AWS::StackName}-WatchTime-GlueTrigger"
  #
  # WatchTimeLogsTable:
  #   Type: AWS::Glue::Table
  #   Properties:
  #     CatalogId: !Ref AWS::AccountId
  #     DatabaseName: !Ref GlueDatabase
  #     TableInput:
  #       Name: 'watch_time_logs'
  #       TableType: EXTERNAL_TABLE
  #       Parameters: {
  #         "classification": "parquet",
  #         "typeOfData": "file",
  #         "compressionType": "none"
  #       }
  #       PartitionKeys:
  #       - Name: partition_key
  #         Type: string
  #       StorageDescriptor:
  #         OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
  #         Columns:
  #         - Name: MetricType
  #           Type: string
  #         - Name: user_id
  #           Type: string
  #         - Name: video_id
  #           Type: string
  #         - Name: at
  #           Type: double
  #         - Name: TimeStamp
  #           Type: bigint
  #         - Name: duration
  #           Type: int
  #         - Name: year
  #           Type: string
  #         - Name: month
  #           Type: string
  #         - Name: day
  #           Type: string
  #         - Name: watch_percent
  #           Type: double
  #         InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
  #         Location: !Join ['',['s3://',!Ref PlayerLogsBucket,'/watch_time_processed/']]
  #         SerdeInfo:
  #           SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe

  EventIngestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API GW Ingest point for events
      Name: !Sub ${AWS::StackName}-v1
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL

  EventIngestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - EventIngestApiPOST
      - EventIngestApiOPTIONS
    Properties:
      RestApiId: !Ref EventIngestApi
      StageName: prod2

  EventIngestApiPOST:
    DependsOn:
      - PlayerLogsDeliveryStream
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        Credentials: !GetAtt EventIngestEndpointRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:firehose:action/PutRecord"
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: 
            !Sub |
              #set($payload = $util.parseJson($input.json('$.record.Data')))
              #set($data = "{
                #foreach($mapEntry in $payload.entrySet())
                  ""$mapEntry.key"": ""$mapEntry.value"",
                #end
                ""event_time"": ""$context.requestTimeEpoch""
              }")
              {
                "DeliveryStreamName": "${PlayerLogsDeliveryStream}",
                "Record": {
                  "Data": "$util.base64Encode($data)"
                }
              }
      ResourceId: !Ref EventIngestApiResource
      RestApiId: !Ref EventIngestApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels: { "application/json": "Empty" }

  EventIngestApiOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: |
            {"statusCode": 200}
      ResourceId: !Ref EventIngestApiResource
      RestApiId: !Ref EventIngestApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          ResponseModels: { "application/json": "Empty" }

  EventIngestApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EventIngestApi
      ParentId: !GetAtt EventIngestApi.RootResourceId
      PathPart: streams

  EventIngestEndpointRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: "Allow"
            Principal:
              Service:
                - "firehose.amazonaws.com"
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/service-role/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess"

  IVSQoSSummaryDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${AWS::StackName}-QoS-PlayerSummaryDashboard-v1"
      DashboardBody: !Sub '{"widgets":[{"type":"metric","x":9,"y":3,"width":12,"height":6,"properties":{"metrics":[["${AWS::StackName}-QoS/PlayerSummary","BUFFER_RATIO","ClientPlatform","android",{"accountId":"${AWS::AccountId}"}],["...","ios",{"accountId":"${AWS::AccountId}"}],["...","web",{"accountId":"${AWS::AccountId}"}]],"view":"singleValue","stacked":false,"region":"${AWS::Region}","stat":"p95","period":60,"start":"-PT1H","end":"P0D","title":"Buffer Ratio - p95"}},{"type":"metric","x":0,"y":3,"width":12,"height":6,"properties":{"metrics":[["${AWS::StackName}-QoS/PlayerSummary","CONCURRENCY","ClientPlatform","android",{"accountId":"${AWS::AccountId}"}],["...","ios",{"accountId":"${AWS::AccountId}"}],["...","web",{"accountId":"${AWS::AccountId}"}]],"view":"singleValue","stacked":false,"region":"${AWS::Region}","stat":"Average","period":60,"start":"-PT1H","end":"P0D","title":"Concurrent Users - Avg"}},{"type":"metric","x":0,"y":9,"width":12,"height":6,"properties":{"metrics":[["${AWS::StackName}-QoS/PlayerSummary","ERRORS","ClientPlatform","android",{"accountId":"${AWS::AccountId}"}],["...","ios",{"accountId":"${AWS::AccountId}"}],["...","web",{"accountId":"${AWS::AccountId}"}]],"view":"singleValue","stacked":false,"region":"${AWS::Region}","start":"-PT1H","end":"P0D","title":"Errors","stat":"Sum","period":60}},{"type":"metric","x":0,"y":0,"width":18,"height":3,"properties":{"metrics":[["${AWS::StackName}-QoS/PlayerSummary","LIVE_LATENCY","ClientPlatform","android",{"accountId":"${AWS::AccountId}"}],["...","ios",{"accountId":"${AWS::AccountId}"}],["...","web",{"accountId":"${AWS::AccountId}"}]],"view":"singleValue","stacked":false,"region":"${AWS::Region}","start":"-PT1H","end":"P0D","title":"Live Latency","stat":"Average","period":60}},{"type":"metric","x":9,"y":9,"width":12,"height":6,"properties":{"view":"singleValue","stacked":false,"region":"${AWS::Region}","start":"-PT1H","end":"P0D","title":"Startup Time","stat":"Average","period":60,"metrics":[["${AWS::StackName}-QoS/PlayerSummary","STARTUP_TIME","ClientPlatform","android",{"accountId":"${AWS::AccountId}"}],["...","ios",{"accountId":"${AWS::AccountId}"}],["...","web",{"accountId":"${AWS::AccountId}"}]]}}]}'

  # IVSQuizDashboard:
  #   Type: AWS::CloudWatch::Dashboard
  #   Properties:
  #     DashboardName: !Sub "${AWS::StackName}-QoS-QuizSummaryDashboard-v1"
  #     DashboardBody: !Sub '{"widgets":[{"type":"metric","x":0,"y":0,"width":18,"height":6,"properties":{"metrics":[["${AWS::StackName}-QoS/Answers","CONCURRENT_USERS","ChannelName","ACROSS_CHANNEL","ClientPlatform","web"],["...","ios"],["...","android"],["...","mobile-web"]],"view":"singleValue","stacked":false,"region":"${AWS::Region}","stat":"Average","period":60,"title":"CONCURRENT_USERS"}}]}'

Outputs:
  PlayerURL:
    Value: !Sub https://${CFDistribution.DomainName}/ui/index.html
    Condition: DeployDemoUICondition
  PlayerCWDashboard:
    Value: !Sub
      - https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${DashboardName}
      - { DashboardName: !Ref IVSQoSSummaryDashboard}
  # QuizCWDashboard:
  #   Value: !Sub
  #     - https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${DashboardName}
  #     - { DashboardName: !Ref IVSQuizDashboard}
  RealTimeAnalyticsApp:
    Value: !Sub
      - https://${AWS::Region}.console.aws.amazon.com/kinesisanalytics/home?region=${AWS::Region}#/wizard/hub?applicationName=${KinesisAnalyticsApp}
      - { KinesisAnalyticsApp: !Ref RealtimeAnalytics }
  sendQoSEventUrl:
    Value: !Sub https://${EventIngestApi}.execute-api.${AWS::Region}.amazonaws.com/prod2/streams
  sendQuizEventUrl:
    Value: !Sub https://${EventIngestApi}.execute-api.${AWS::Region}.amazonaws.com/prod2/streams
  DeliveryStreamName:
    Value: !Sub '${AWS::StackName}-playerlogs-stream'
  LiveURL:
    Value: !Ref LiveURL
